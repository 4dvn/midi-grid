#!/bin/bash
#
# Run unit tests

print_usage() {
    echo "Input flag usage:
  -m only tests, affected by recent changes are to be ran
  -n if build.ninja file is not found in test_path directory, the script shouldn't regenerate it
  -c generate coverage report
  -o open coverage report in browser after generating it
  -g monochrome output"
}

readonly WORKING_DIR=$pwd
readonly UNIT_TESTS_DIR=$(dirname $(readlink -f $0))
readonly OBJECT_DIR_NAME='objects'
readonly COVERAGE_DIR_NAME='coverage_report'
readonly BROWSER='xdg-open'

readonly BUILD_FILENAME=build.ninja

modified_flag=false
no_generation_flag=false
coverage_flag=false
open_coverage_report_flag=false
no_color_flag=false

while getopts 'mncog' flag; do
    case "${flag}" in
        m) modified_flag=true ;;
        n) no_generation_flag=true ;;
        c) coverage_flag=true ;;
        o) open_coverage_report_flag=true ;;
        g) no_color_flag=true ;;
        *) print_usage
            exit 1 ;;
    esac
done

if [[ "${no_color_flag}" = true ]]; then
    readonly RED=''
    readonly GREEN=''
    readonly NC=''
else
    readonly RED='\033[0;31m'
    readonly GREEN='\033[0;32m'
    readonly NC='\033[0m' # No Color
fi

passed_tests=()
failed_tests=()

for test_path in ${UNIT_TESTS_DIR}/tests/*/
do
    test_name=${test_path%*/} # remove the trailing "/"
    test_name=${test_name##*/} # print everything after the final "/"

    if ! [[ -f ${test_path}${BUILD_FILENAME} ]]; then
        if [[ "${no_generation_flag}" = false ]]; then
            ${UNIT_TESTS_DIR}/generate.py ${test_path}
            if [[ $? -ne 0 ]]; then
                echo "generation of ${BUILD_FILENAME} file for ${test_name} failed, use -n flag to ignore it"
                continue
            fi
        fi
    fi

    if [[ -f ${test_path}${BUILD_FILENAME} ]]; then
        cd ${test_path}
        build_output=$(ninja all)
        if [[ $? -ne 0 ]]; then
            echo "${build_output}"
            echo "${RED}Build of ${test_name} failed${NC}\n"
            continue
        else
            if [[ "${build_output}" = "ninja: no work to do." ]]; then
                if [[ "${modified_flag}" = true ]]; then
                    continue
                fi
            else
                echo "${build_output}\n"
            fi
        fi
    fi

    if [[ -f ${test_path}${test_name} ]]; then
        echo "${test_name}"
        ${test_path}${test_name}
        if [[ $? -ne 0 ]]; then
            failed_tests+=("${test_name}")
        else
            passed_tests+=("${test_name}")
        fi
        echo ""
    fi
done

number_of_failed_tests=${#failed_tests[@]}
number_of_passed_tests=${#passed_tests[@]}
((number_of_tests_ran=number_of_failed_tests+number_of_passed_tests))

passed_str="${number_of_passed_tests}"
if [[ "${number_of_passed_tests}" = "0" ]]; then
    passed_str="none"
elif [[ "${number_of_passed_tests}" = "${number_of_tests_ran}" ]]; then
    passed_str="all"
fi

exit_value=0 # no error
if [[ "${number_of_failed_tests}" != "0" ]]; then
    exit_value=1 # output non-zero value on exit
fi


echo "${number_of_tests_ran} unit tests were ran, ${passed_str} of them have passed."

for test in ${passed_tests[*]}
do
    printf "${GREEN}[  PASSED  ]${NC} ${test}\n"
done

for test in ${failed_tests[*]}
do
    printf "${RED}[  FAILED  ]${NC} ${test}\n"
done

if [[ "${coverage_flag}" = true ]]; then
    echo ""
    echo "Generating unit test coverage report..."

    cd ${UNIT_TESTS_DIR}
    mkdir -p ${COVERAGE_DIR_NAME}

    lcov --c --directory ${OBJECT_DIR_NAME} --output-file ${COVERAGE_DIR_NAME}/coverage_unfiltered.info >/dev/null 2>&1
    cd ${COVERAGE_DIR_NAME}
    lcov --remove coverage_unfiltered.info -o coverage_filtered.info \
        '/usr/include/*' '/usr/src/*' '*submodules/*' '*unit_tests/*' '*Interface.h' #>/dev/null 2>&1
    genhtml coverage_filtered.info --output-directory . #>/dev/null 2>&1

    echo "Coverage report generated, it can be accessed at:"
    echo "${UNIT_TESTS_DIR}/${COVERAGE_DIR_NAME}/index.html"

    if [[ "${open_coverage_report_flag}" = true ]]; then
        ${BROWSER} ${UNIT_TESTS_DIR}/${COVERAGE_DIR_NAME}/index.html
    fi
fi

cd ${WORKING_DIR}

exit ${exit_value}
