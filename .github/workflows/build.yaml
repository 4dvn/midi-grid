name: Build
on: 
  push:
    branches:
      - master
    paths:
      - 'Firmware/**'
      - '!Firmware/unit_tests/**'
      - '!Firmware/.vscode/**'
      - '!**.md'
  pull_request:
    paths:
      - 'Firmware/**'
      - '!Firmware/unit_tests/**'
      - '!Firmware/.vscode/**'
      - '!**.md'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Checkout submodules
        uses: textbook/git-checkout-submodule-action@master
      - name: Install Python packages
        run: pip3 install ninja
      - name: Install Python 2 packages
        run: pip2 install intelhex
      - name: Setup ninja-build
        uses: seanmiddleditch/gha-setup-ninja@master
      - name: Setup ARM GNU tools
        run: sudo apt install gcc-arm-none-eabi
      - name: Build
        run: cd Firmware && ninja | tee build_log.txt
      - name: Upload build log
        uses: actions/upload-artifact@v1
        with:
          name: build_log
          path: Firmware/build_log.txt
      - name: Get version
        if: success() && github.event_name == 'push'
        id: get_version
        run: echo "::set-output name=version::$(git rev-list --count origin/master)"
      - name: Compress output files
        if: success() && github.event_name == 'push'
        run: cd Firmware/output && 7z a midi-grid_v${{ steps.get_version.outputs.version }}.7z midi-grid.*
      - name: Create Release
        if: success() && github.event_name == 'push'
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Build v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        if: success() && github.event_name == 'push'
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: Firmware/output/midi-grid_v${{ steps.get_version.outputs.version }}.7z
          asset_name: midi-grid_v${{ steps.get_version.outputs.version }}.7z
          asset_content_type: application/7z
